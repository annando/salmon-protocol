#summary Summarizes the Salmon Protocol, the problem it solves, and its scope.

= Introduction: Unifying the Conversations =

Conversations are becoming distributed and fragmented on the Web.  Content is increasingly syndicated and re-aggregated across the Web beyond the context of its home web page.  Technologies such as RSS, Atom, and PubSubHubbub allow for a real time flow of updates to readers, but this leads to a fragmentation of conversations around the content.  The comments, ratings, and annotations increasingly happen at the aggregator and are invisible to the original source.

The Salmon protocol is an open, simple, standards-based solution that lets aggregators and sources unify the conversations.  It focuses on public conversations around public content.

= Details: Basic Protocol Flow =

A _source_ provides an RSS/Atom feed of content.  It includes a Salmon link in its feed:

{{{<link rel="salmon" href="http://example.org/salmon-endpoint"/>}}}

An _aggregator_ reads the feed, preferably via PubSubHubbub, and sees from the link that it is Salmon-enabled.  It remembers the endpoint URL for later use.

When an aggregator user comments on an item from that feed, the aggregator stores the comment as usual, and then also POSTs a salmon version of it to the source's Salmon endpoint:

{{{
POST /salmon-endpoint HTTP/1.1
Host: example.org
Content-Type: application/atom+xml

<?xml version='1.0' encoding='UTF-8'?>
    <entry xmlns='http://www.w3.org/2005/Atom'>
    <author>
      <name>John Doe</name>
      <uri>acct:johndoe@aggregator-example.com</uri>
    </author>
    <content>Yes, but what about the llamas?</content>
    <id>tag:aggregator-example.com,2009:cmt-441071406174557701</id>
    <updated>2009-09-28T18:30:02Z</updated>
    <thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0'
       ref='tag:example.org,1999:id-22717401685551851865'/>
    <sal:signature xmlns:sal='http://salmonprotocol.org/ns/1.0'>
        e55bee08b4c643bc8aedf122f606f804269b7bc7
    </sal:signature>
    <title/>
</entry>
}}}

The source responds to the salmon with standard HTTP codes - 2xx for OK, 4xx for input problem, 5xx for source / server error.  The usual result on a 2xx response is for the salmon to be published along with other comments on the source's web page.  Note that sources are not obligated to actually publish the salmon -- they may moderate them, spam block them, aggregate or analyze them instead.  However, if the source does publish the salmon in a comment feed, it has certain obligations detailed in RepublishingDetails.

The end result of the protocol is that sources and aggregators can co-operate to present a unified view of the global conversation around any topic represented by an RSS/Atom feed item.

More details can be found on individual pages.  Eventually these will be collected into a proper RFC (or perhaps more than one).  RepublishingDetails talks about how sources can republish salmon back out to the world, merging comments from all sources.  SignatureDetails talks about how to generate and validate the sal:signature block above.  SalmonPublicKeys talks about the PKI that Salmon invents (not kidding).  